<?xml version="1.0" encoding="UTF-8"?>
<launch>
  <arg name="left_namespace" default="/luxonis/oak/left" />
  <arg name="right_namespace" default="/luxonis/oak/right" />
  <arg name="use_sim_time" default="false" />
  <arg name="vis" default="false" />
  <arg name="device" default="cuda" />
  <arg name="max_disp" default="192" />
  <arg name="model_name" default="stackhourglass" />
  <arg name="weights" default="$(find-pkg-share rgbd_proc)/config/weights/psmnet/pretrained_model_KITTI2015.tar" />

  <!-- Decompress LEFT image -->
  <node pkg="image_transport" exec="republish" name="uncompress_left" output="screen" namespace="luxonis/oak">
    <param name="in_transport" value="compressed" />
    <param name="out_transport" value="raw" />
    <remap from="in/compressed" to="$(var left_namespace)/image_raw/compressed" />
    <remap from="out" to="$(var left_namespace)/image_raw" />
  </node>

  <!-- Decompress RIGHT image -->
  <node pkg="image_transport" exec="republish" name="uncompress_right" output="screen" namespace="luxonis/oak">
    <param name="in_transport" value="compressed" />
    <param name="out_transport" value="raw" />
    <remap from="in/compressed" to="$(var right_namespace)/image_raw/compressed" />
    <remap from="out" to="$(var right_namespace)/image_raw" />
  </node>

  <!-- Rectify and undistort stereo images -->
  <include file="$(find-pkg-share stereo_image_proc)/launch/stereo_image_proc.launch.py">
    <arg name="left_namespace" value="$(var left_namespace)" />
    <arg name="right_namespace" value="$(var right_namespace)" />
    <arg name="min_disparity" value="0"/>
    <arg name="disparity_range" value="$(var max_disp)"/>
    <arg name="approximate_sync" value="true" />
  </include>

  <!-- Depth Estimation Node using PSMNet -->
  <node pkg="rgbd_proc" exec="depth_estimation.py" name="depth_estimation" output="screen">
    <param name="max_disp" value="$(var max_disp)" />
    <param name="model_name" value="$(var model_name)" />
    <param name="weights" value="$(var weights)" />
    <param name="device" value="$(var device)" />
    <param name="vis" value="$(var vis)" />
    <param name="use_sim_time" value="$(var use_sim_time)" />
    <param name="max_msgs_delay" value="0.05" />
    <param name="max_age" value="0.5" />

    <remap from="/camera_left/image_rect" to="$(var left_namespace)/image_rect_color" />
    <remap from="/camera_right/image_rect" to="$(var right_namespace)/image_rect_color" />
    <remap from="/depth" to="/psmnet_depth" />
  </node>

  <!-- Depth filtering -->
  <node pkg="rgbd_proc" exec="depth_filter.py" name="depth_filter" output="screen">
    <param name="fov_filter.enabled" value="true" />
    <param name="fov_filter.min_angle" value="-15.0" />
    <param name="fov_filter.max_angle" value="90.0" />

    <remap from="/depth" to="/psmnet_depth" />
    <remap from="/camera_info" to="/luxonis/oak/stereo/camera_info" />
    <remap from="/filtered_depth" to="/pamnet_depth_filtered" />
  </node>

  <!-- Publish point cloud from depth image -->
  <node pkg="depth_image_proc" exec="point_cloud_xyzrgb_node" name="point_cloud_xyz_node" output="screen">
<!--     <remap from="depth_registered/image_rect" to="/psmnet_depth" /> -->
    <remap from="depth_registered/image_rect" to="/pamnet_depth_filtered" />
    <remap from="rgb/image_rect_color" to="$(var left_namespace)/image_rect_color" />
    <remap from="rgb/camera_info" to="$(var left_namespace)/camera_info" />
    <remap from="points" to="/psmnet_points" />

    <param name="approximate_sync" value="true" />
    <param name="queue_size" value="10" />
    <param name="output_frame" value="camera_front" />
  </node>

</launch>
